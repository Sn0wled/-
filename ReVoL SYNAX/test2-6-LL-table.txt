/* Generated by 2016 ReVoL SYNAX */
/* 20-05-2024 18:56:08 */

#define ST_MAX_RULE_LEN 16 /* Max rule length */

/* Rules */
sttype RULE[36][ST_MAX_RULE_LEN] = {
/* 0*/{ TOK_EOT },
/* 1 SYM_SS   */{ SYM_S, SYM_S_, TOK_EOT },
/* 2 SYM_S_   */{ SYM_S, SYM_S_, TOK_EOT },
/* 3 SYM_S_   */{ TOK_EOT },
/* 4 SYM_S    */{ TOK_LS, SYM_SS, TOK_RS, TOK_EOT },
/* 5 SYM_S    */{ TOK_IF, TOK_LP, SYM_E, TOK_RP, SYM_S, TOK_EOT },
/* 6 SYM_S    */{ TOK_ID, TOK_EQ, SYM_E, TOK_SEMI, TOK_EOT },
/* 7 SYM_S    */{ TOK_PRINT, TOK_LP, SYM_E, TOK_RP, TOK_SEMI, TOK_EOT },
/* 8 SYM_E    */{ SYM_OR, SYM_OR_, TOK_EOT },
/* 9 SYM_OR_  */{ TOK_EOT },
/*10 SYM_OR_  */{ TOK_LOR, SYM_OR, SYM_OR_, TOK_EOT },
/*11 SYM_OR   */{ SYM_AND, SYM_AND_, TOK_EOT },
/*12 SYM_AND_ */{ TOK_LAND, SYM_AND, SYM_AND_, TOK_EOT },
/*13 SYM_AND_ */{ TOK_EOT },
/*14 SYM_AND  */{ SYM_NOT, TOK_EOT },
/*15 SYM_NOT  */{ TOK_LNOT, SYM_C, TOK_EOT },
/*16 SYM_NOT  */{ SYM_C, SYM_C_, TOK_EOT },
/*17 SYM_C_   */{ TOK_EOT },
/*18 SYM_C_   */{ TOK_EQ, SYM_C, TOK_EOT },
/*19 SYM_C_   */{ TOK_GT, SYM_C, TOK_EOT },
/*20 SYM_C_   */{ TOK_LT, SYM_C, TOK_EOT },
/*21 SYM_C    */{ SYM_AS, SYM_AS_, TOK_EOT },
/*22 SYM_AS_  */{ TOK_EOT },
/*23 SYM_AS_  */{ TOK_ADD, SYM_AS, SYM_AS_, TOK_EOT },
/*24 SYM_AS_  */{ TOK_SUB, SYM_AS, SYM_AS_, TOK_EOT },
/*25 SYM_AS   */{ SYM_MD, SYM_MD_, TOK_EOT },
/*26 SYM_MD_  */{ TOK_EOT },
/*27 SYM_MD_  */{ TOK_MUL, SYM_MD, SYM_MD_, TOK_EOT },
/*28 SYM_MD_  */{ TOK_DIV, SYM_MD, SYM_MD_, TOK_EOT },
/*29 SYM_MD   */{ SYM_U, TOK_EOT },
/*30 SYM_U    */{ TOK_SUB, SYM_V, TOK_EOT },
/*31 SYM_U    */{ SYM_V, TOK_EOT },
/*32 SYM_V    */{ TOK_ID, TOK_EOT },
/*33 SYM_V    */{ TOK_QUOTE, TOK_EOT },
/*34 SYM_V    */{ TOK_I4, TOK_EOT },
/*35 SYM_V    */{ TOK_LP, SYM_E, TOK_RP, TOK_EOT }
};

#define MAX_RULE 35 /* Max rule index */

/* Rule Length */
int RLEN[] = {0,2,2,0,3,5,4,5,2,0,3,2,3,0,1,2,2,0,2,2,2,2,0,3,3,2,0,3,3,1,2,1,1,1,1,3};

/* Evaluates actual rule's length */
void get_rule_len() {
    int rule, count;
    for (rule = 1; rule <= MAX_RULE; rule++) {
        for (count = 0; count < ST_MAX_RULE_LEN; count++) {
            if ((int)RULE[rule][count] == 0) break;
        }
        RLEN[rule] = count;
    }
}

#define ACC 255 /* ACCEPT CODE */
#define POP 254 /* POP CODE */
#define START SYM_SS /* START SYMBOL */

/* Syntax Table SYNTA (LL-analysis) */
stack_t SYNTA[39][22] = {
/*            EOT   [{]   [}]  [if]   [(]   [)]  [id]   [=]   [;] [prin  [||]  [&&]   [!]  [==]   [>]   [<]   [+]   [-]   [*]   [/] [quot  [I4] */
/*       */{  ACC,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*    [{]*/{    0,  POP,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*    [}]*/{    0,    0,  POP,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*   [if]*/{    0,    0,    0,  POP,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*    [(]*/{    0,    0,    0,    0,  POP,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*    [)]*/{    0,    0,    0,    0,    0,  POP,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*   [id]*/{    0,    0,    0,    0,    0,    0,  POP,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*    [=]*/{    0,    0,    0,    0,    0,    0,    0,  POP,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*    [;]*/{    0,    0,    0,    0,    0,    0,    0,    0,  POP,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*[print]*/{    0,    0,    0,    0,    0,    0,    0,    0,    0,  POP,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*   [||]*/{    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  POP,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*   [&&]*/{    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  POP,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*    [!]*/{    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  POP,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*   [==]*/{    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  POP,    0,    0,    0,    0,    0,    0,    0,    0 },
/*    [>]*/{    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  POP,    0,    0,    0,    0,    0,    0,    0 },
/*    [<]*/{    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  POP,    0,    0,    0,    0,    0,    0 },
/*    [+]*/{    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  POP,    0,    0,    0,    0,    0 },
/*    [-]*/{    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  POP,    0,    0,    0,    0 },
/*    [*]*/{    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  POP,    0,    0,    0 },
/*    [/]*/{    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  POP,    0,    0 },
/*[quote]*/{    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  POP,    0 },
/*   [I4]*/{    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,  POP },
/*            EOT   [{]   [}]  [if]   [(]   [)]  [id]   [=]   [;] [prin  [||]  [&&]   [!]  [==]   [>]   [<]   [+]   [-]   [*]   [/] [quot  [I4] */
/*   <SS>*/{    0,    1,    0,    1,    0,    0,    1,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*    <S>*/{    0,    4,    0,    5,    0,    0,    6,    0,    0,    7,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*   <S.>*/{    3,    2,    3,    2,    0,    0,    2,    0,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*    <E>*/{    0,    0,    0,    0,    8,    0,    8,    0,    0,    0,    0,    0,    8,    0,    0,    0,    0,    8,    0,    0,    8,    8 },
/*   <OR>*/{    0,    0,    0,    0,   11,    0,   11,    0,    0,    0,    0,    0,   11,    0,    0,    0,    0,   11,    0,    0,   11,   11 },
/*  <OR.>*/{    0,    0,    0,    0,    0,    9,    0,    0,    9,    0,   10,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*  <AND>*/{    0,    0,    0,    0,   14,    0,   14,    0,    0,    0,    0,    0,   14,    0,    0,    0,    0,   14,    0,    0,   14,   14 },
/* <AND.>*/{    0,    0,    0,    0,    0,   13,    0,    0,   13,    0,   13,   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },
/*  <NOT>*/{    0,    0,    0,    0,   16,    0,   16,    0,    0,    0,    0,    0,   15,    0,    0,    0,    0,   16,    0,    0,   16,   16 },
/*    <C>*/{    0,    0,    0,    0,   21,    0,   21,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   21,    0,    0,   21,   21 },
/*   <C.>*/{    0,    0,    0,    0,    0,   17,    0,    0,   17,    0,   17,   17,    0,   18,   19,   20,    0,    0,    0,    0,    0,    0 },
/*   <AS>*/{    0,    0,    0,    0,   25,    0,   25,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   25,    0,    0,   25,   25 },
/*  <AS.>*/{    0,    0,    0,    0,    0,   22,    0,    0,   22,    0,   22,   22,    0,   22,   22,   22,   23,   24,    0,    0,    0,    0 },
/*   <MD>*/{    0,    0,    0,    0,   29,    0,   29,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   29,    0,    0,   29,   29 },
/*  <MD.>*/{    0,    0,    0,    0,    0,   26,    0,    0,   26,    0,   26,   26,    0,   26,   26,   26,   26,   26,   27,   28,    0,    0 },
/*    <U>*/{    0,    0,    0,    0,   31,    0,   31,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   30,    0,    0,   31,   31 },
/*    <V>*/{    0,    0,    0,    0,   35,    0,   32,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   33,   34 }
};
